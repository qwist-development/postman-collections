{
  "info": {
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "name": "finX Account Verification",
    "description": "This collection can be used to test the account verification product - that is\ncheck how well does the provided name match the name of the account owner.\n\nLet's do account verification for the name \"Hans Meier\"\n\nThe interaction with the collection is as follows:\n  1. Use the \"Create Widget Link to start the verification flow\" request to get a URL to the UI (Widget) - you will need to follow that URL in your browser and complete the bank account connection there. \n     In the end you will be redirected to `http://localhost` and the redirect link will contain some additional information. Copy the whole URL and paste it into the `callback_url` environment variable.\n    1. Paste the link into your browser and enter `figo01` as username and `654321` as password. Click next\n    2. Select \"Mockbank - Decoupled/Embedded\"\n    3. Enter `figo01` and `654321` as username and password correspondingly\n    4. Select \"Auth Meth by Phone\" as SCA method and click next\n    5. Enter \"123456\" as an OTP\n    6. Select an account which you want to verify against\n    7. You will be redirected to localhost - copy the whole URL and put it into the `callback_url` postman environment variable\n  2. Now use the \"Exchange OAuth code\" request to exchange the OAuth code for an access token.\n  3. Now you can use \"Get Accounts\" or \"Get Transactions\" endpoints to get accounts or transactions of the user accordingly.\""
  },
  "item": [
    {
      "name": "Create Widget Link to start the verification flow",
      "request": {
        "method": "POST",
        "header": [
          "Content-Type: application/json"
        ],
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "onetime",
            "account-verification"
          ]
        },
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "password",
              "value": "{{client_password}}",
              "type": "string"
            },
            {
              "key": "username",
              "value": "{{client_username}}",
              "type": "string"
            }
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n    \"state\": \"test123\",\n    \"redirect_uri\": \"http://localhost\",\n    \"language\": \"de\",\n    \"name\": \"Hans Peter Meier\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": "pm.response.to.have.status(201)\nconst resp = pm.response.json()\npm.environment.set(\"av_id\",resp.id)",
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": "if (!pm.environment.get(\"client_username\") || !pm.environment.get(\"client_password\")) {\n    throw new Error(\"Client credentials are missing: please reach out to your contact person or ask for client credentials via the form: https://qwist.com/contact\")\n}"
          }
        }
      ]
    },
    {
      "name": "Exchange OAuth code",
      "description": "Once you copied the URL to which you were redirected to the `callback_url` environment variable - use this request to exchange the OAuth code for an access token",
      "request": {
        "method": "POST",
        "header": [
          "Content-Type: application/json"
        ],
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "auth",
            "token"
          ]
        },
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "password",
              "value": "{{client_password}}",
              "type": "string"
            },
            {
              "key": "username",
              "value": "{{client_username}}",
              "type": "string"
            }
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n    \"grant_type\": \"authorization_code\",\n    \"code\": \"{{auth_code}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": "pm.expect(pm.environment.get(\"callback_url\")).to.not.be.empty\nconst code = pm.environment.get(\"callback_url\").split('&')[0].split('=')[1]\npm.environment.set('auth_code',code)"
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": "pm.response.to.have.status(200)\ndata = pm.response.json()\npm.expect(data.access_token).to.not.empty\npm.expect(data.refresh_token).to.not.empty\npm.environment.set(\"access_token\", data.access_token)\npm.environment.set(\"refresh_token\", data.refresh_token)"
          }
        }
      ]
    },
    {
      "name": "Get Account Verification Receipt",
      "request": {
        "method": "GET",
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "rest",
            "account-verifications",
            "{{av_id}}"
          ]
        },
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{access_token}}",
              "type": "string"
            }
          ]
        }
      }
    }
  ]
}

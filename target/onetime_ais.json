{
  "info": {
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "name": "finX Financial Data (one-time account access)",
    "description": "One-time account access to get the account data and transaction history of the users connected bank accounts.\n\nThe interaction with the collection is as follows.\n\nUse Giro account - Execute \"Obtain URL to start the AIS flow via Widget\" request:\n  1. Paste the link into your browser\n  2. Select \"Mockbank - Embedded/Decoupled\"\n  3. Enter `figo01` as username and `654321` as password. Click next\n  4. Select \"Auth Meth by Phone\" as SCA method and click next\n  5. Enter \"123456\" as an OTP\n  6. You will be redirected to localhost - copy the whole URL and put it into the `callback_url` postman environment variable\n  7. Now use the \"Exchange OAuth code\" request to exchange the OAuth code for an access token.\n  8. Now you can use \"Get Accounts\" or \"Get Transactions\" endpoints to get accounts or transactions of the user accordingly.\nUse Depot account - Execute \"Obtain URL to start the AIS flow via Widget\" request:\n  1. Paste the link into your browser\n  2. Select \"Demobank - 90090042\"\n  3. Enter `demo` as username and password\n  4. Select a Depot account from the list of accounts\n  5. Now use the \"Exchange OAuth code\" request to exchange the OAuth code for an access token.\n  6. Now you can use \"Get Accounts\" or \"Get Securities\" endpoints to get accounts or transactions of the user accordingly.\""
  },
  "item": [
    {
      "name": "Obtain URL to start the AIS flow via Widget",
      "request": {
        "method": "POST",
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "onetime",
            "access"
          ]
        },
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "password",
              "value": "{{client_password}}",
              "type": "string"
            },
            {
              "key": "username",
              "value": "{{client_username}}",
              "type": "string"
            }
          ]
        },
        "header": [
          "Content-Type: application/json"
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"state\": \"test123\",\n  \"redirect_uri\": \"http://localhost\",\n  \"language\": \"de\",\n  //\"account_types\": [\"Giro account\"],\n  //\"accounts\": [{\n  //    \"id\": \"DE07900948150000002000\"\n  //}, {\n  //    \"id\": \"DE77900948150000002001\"\n  //}],\n  \"sync_period\": 90,\n  \"allow_multi_selection\": true\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": "pm.response.to.have.status(201)"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": "if (!pm.environment.get(\"client_username\") || !pm.environment.get(\"client_password\")) {\n    throw new Error(\"Client credentials are missing: please reach out to your contact person or ask for client credentials via the form: https://qwist.com/contact\")\n}"
          }
        }
      ]
    },
    {
      "name": "Exchange OAuth code",
      "request": {
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "auth",
            "token"
          ]
        },
        "method": "POST",
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "password",
              "value": "{{client_password}}",
              "type": "string"
            },
            {
              "key": "username",
              "value": "{{client_username}}",
              "type": "string"
            }
          ]
        },
        "header": [
          "Content-Type: application/json"
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"grant_type\": \"authorization_code\",\n    \"code\": \"{{auth_code}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": "pm.expect(pm.environment.get(\"callback_url\")).to.not.be.empty\nconst code = pm.environment.get(\"callback_url\").split('&')[0].split('=')[1]\npm.environment.set('auth_code',code)"
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": "pm.response.to.have.status(200)\ndata = pm.response.json()\npm.expect(data.access_token).to.not.empty\npm.expect(data.refresh_token).to.not.empty\npm.environment.set(\"access_token\", data.access_token)\npm.environment.set(\"refresh_token\", data.refresh_token)"
          }
        }
      ]
    },
    {
      "name": "Get accounts",
      "request": {
        "method": "GET",
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "rest",
            "accounts"
          ]
        },
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{access_token}}",
              "type": "string"
            }
          ]
        }
      }
    },
    {
      "name": "Get transactions",
      "request": {
        "method": "GET",
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{access_token}}",
              "type": "string"
            }
          ]
        },
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "rest",
            "transactions"
          ]
        }
      }
    },
    {
      "name": "Get securities",
      "request": {
        "method": "GET",
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{access_token}}",
              "type": "string"
            }
          ]
        },
        "url": {
          "host": [
            "{{host}}"
          ],
          "path": [
            "rest",
            "securities"
          ]
        }
      }
    }
  ]
}

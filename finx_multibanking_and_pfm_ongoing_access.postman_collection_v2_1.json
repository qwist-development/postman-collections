{
	"info": {
		"_postman_id": "97e5d3ea-df23-47a5-9879-c526a6bf6a56",
		"name": "finX Multibanking & PFM (ongoing access)",
		"description": "In this postman-collection we will consider an ongoing account connection - which means the user and his/her transactions will be stored in finx database and subsequent account synchronizations will only store new transactions that were not retrieved before.\n\nWe will also go through the process of refreshing an `access_token` using a `refresh_token`.\n\nScenario:\n\n- Refresh an `access_token`:\n    \n    - Use the \"Create Widget Link\" request to start the flow - then copy the URL returned in the `location` response field - paste it into your browser and follow it.\n        \n        - Paste the link into your browser and enter `figo01` as username and `654321` as password. Click next\n            \n        - Select \"Auth Meth by Phone\" as SCA method and click next\n            \n        - Enter \"123456\" as an OTP\n            \n        - You will be redirected to localhost - copy the whole URL and put it into the `callback_url` postman environment variable\n            \n    - In the UI - perform all necessary actions to connect your bank account\n    - [Eventually you'll be redirected to <code>http://localhost</code>](http://localhost) - (NOTE: if you're running any application on local port 80 - then the redirect URL can potentially be changed) - copy the URL to which you were redirected and paste it into the `callback_url` environment variable of postman.\n    - Then use the \"Create access token from callback URL\" - to exchange your OAuth code (which is part of the `callback_url` (see `state` parameter which is a JWT token)) for an `access_token`. Look at the response JSON object - notice `access_token` and `refresh_token`\n    - Finally use the \"Retrieve new access token using refresh token\" - to refresh your `access_token` using the `refresh_token` . Again - check the response, you'll see different access and refresh tokens - you can compare them to the ones received in previous step.\n- Synchronize account\n    - In \"Refresh an `access_token`\" scenario you already synchronized your bank account. Since we're doing ongoing account sync - you can synchronize your existing account again.\n    - Use the \"Create Widget Link\" request to start the flow - then copy the URL returned in the `location` response field - paste it into your browser and follow it.\n    - In the UI - perform all necessary actions to connect your bank account\n    - [Eventually you'll be redirected to <code>http://localhost</code>](http://localhost) - (NOTE: if you're running any application on local port 80 - then the redirect URL can potentially be changed) - copy the URL to which you were redirected and paste it into the `callback_url` environment variable of postman.\n    - Then use the \"Create access token from callback URL\" - to exchange your OAuth code (which is part of the `callback_url` (see `state` parameter which is a JWT token)) for an `access_token`. Look at the response JSON object - notice `access_token` and `refresh_token`\n\nIn the end you can use the self-explanatory `GET` requests to get some data from your account. Please call those endpoints in the order they put in the collection from top to bottom. Some of them depend on the results of previous ones.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10164806",
		"_collection_link": "https://martian-station-516509.postman.co/workspace/FinX-Postman-Collections~2214353e-a526-4006-93de-b08ebe2014ae/collection/10164806-97e5d3ea-df23-47a5-9879-c526a6bf6a56?action=share&source=collection_link&creator=10164806"
	},
	"item": [
		{
			"name": "Initial Account Connection",
			"item": [
				{
					"name": "Create Widget Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"client_username\") || !pm.environment.get(\"client_password\")) {",
									"    throw new Error(\"Client credentials are missing: please reach out to your contact person or ask for client credentials via the form: https://qwist.com/contact\")",
									"}",
									"var uuid = require(\"uuid\")",
									"pm.environment.set(\"user_id\", \"postman-collection-\" + uuid.v4() + \"@qwist.com\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": \"test123\",\n    \"redirect_uri\": \"http://localhost\",\n    \"language\": \"en\",\n    \"allow_multi_selection\": true,\n    \"sync_period\": 90,\n    \"save_secrets\": false,\n    \"user_id\": \"{{user_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ongoing/access",
							"host": [
								"{{host}}"
							],
							"path": [
								"ongoing",
								"access"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exchange OAuth code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.get(\"callback_url\")).to.not.be.empty",
									"",
									"const code = pm.environment.get(\"callback_url\").split('&')[0].split('=')[1]",
									"pm.environment.set('auth_code',code)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.response.to.have.status(200)",
									"data = pm.response.json()",
									"pm.expect(data.access_token).to.not.empty",
									"pm.expect(data.refresh_token).to.not.empty",
									"",
									"pm.environment.set(\"access_token\", data.access_token)",
									"pm.environment.set(\"refresh_token\", data.refresh_token)",
									"",
									"pm.sendRequest({",
									"    url:  pm.environment.get(\"host\") + \"/rest/accounts\",",
									"    method: \"GET\",",
									"    header: {",
									"        \"content-type\": \"application/json\",",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")",
									"    },",
									"}, (err, res) => {",
									"    pm.environment.set(\"finx_account_id\", res.json().accounts[0].account_id)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"grant_type\": \"authorization_code\",\n    \"code\": \"{{auth_code}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"token"
							]
						},
						"description": "Once you copied the URL to which you were redirected to the `callback_url` environment variable - use this request to exchange the OAuth code for an access token"
					},
					"response": []
				},
				{
					"name": "Retrieve new access token using refresh token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.response.to.have.status(200)",
									"data = pm.response.json()",
									"pm.expect(data.access_token).to.not.empty",
									"pm.expect(data.refresh_token).to.not.empty",
									"",
									"pm.environment.set(\"access_token\", data.access_token)",
									"pm.environment.set(\"refresh_token\", data.refresh_token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"grant_type\": \"refresh_token\",\n    \"refresh_token\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ongoing account synchronization",
			"item": [
				{
					"name": "Create Widget Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"client_username\") || !pm.environment.get(\"client_password\")) {",
									"    throw new Error(\"Client credentials are missing: please reach out to your contact person or ask for client credentials via the form: https://qwist.com/contact\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state\": \"test123\",\n    \"redirect_uri\": \"http://localhost\",\n    \"language\": \"en\",\n    \"sync_period\": 90,\n    \"save_secrets\": false,\n    \"account_ids\": [\"{{finx_account_id}}\"],\n    \"user_id\": \"{{user_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ongoing/sync",
							"host": [
								"{{host}}"
							],
							"path": [
								"ongoing",
								"sync"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account data & enrichments",
			"item": [
				{
					"name": "Accounts, transactions and securities",
					"item": [
						{
							"name": "Get all accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.response.to.have.status(200)",
											"",
											"data = pm.response.json()",
											"pm.environment.set(\"finx_account_id\", data.accounts[0].account_id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/accounts",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single account",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/accounts/{{finx_account_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"accounts",
										"{{finx_account_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for single account",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/accounts/{{finx_account_id}}/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"accounts",
										"{{finx_account_id}}",
										"transactions"
									],
									"query": [
										{
											"key": "include_statistics",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for all accounts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get securities",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/securities",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"securities"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Contracts",
					"item": [
						{
							"name": "Get all contracts of user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.response.to.have.status(200)",
											"",
											"data = pm.response.json()",
											"pm.environment.set(\"finx_contract_id\", data[0].id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/contracts",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"contracts"
									],
									"query": [
										{
											"key": "offset",
											"value": "true",
											"disabled": true
										},
										{
											"key": "count",
											"value": "1000",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contracts of account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/accounts/{{finx_account_id}}/contracts",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"accounts",
										"{{finx_account_id}}",
										"contracts"
									],
									"query": [
										{
											"key": "offset",
											"value": "true",
											"disabled": true
										},
										{
											"key": "count",
											"value": "1000",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all payment partners",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.response.to.have.status(200)",
											"",
											"data = pm.response.json()",
											"pm.environment.set(\"finx_pp_id\", data[0].id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/payment-partners",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"payment-partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single contract",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/contracts/{{finx_contract_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"contracts",
										"{{finx_contract_id}}"
									],
									"query": [
										{
											"key": "offset",
											"value": "true",
											"disabled": true
										},
										{
											"key": "count",
											"value": "1000",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete contract",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.response.to.have.status(204)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/rest/contracts/{{finx_contract_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"contracts",
										"{{finx_contract_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The finX API provides contract recognition by analysing recurring payments based on a set of rules across transactions enriched with payment partner (creditor/debtor) information."
				},
				{
					"name": "Aggregations",
					"item": [
						{
							"name": "Get categories for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"categories"
									],
									"query": [
										{
											"key": "accounts",
											"value": "{{account_id}}",
											"disabled": true
										},
										{
											"key": "period",
											"value": "2021-01",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "accesses",
											"value": "{{access_id}}",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "EUR",
											"disabled": true
										},
										{
											"key": "since",
											"value": "2021-01-15",
											"disabled": true
										},
										{
											"key": "until",
											"value": "2021-01-31",
											"disabled": true
										},
										{
											"key": "amount_gte",
											"value": "#trx with amount equal or greater than this value",
											"disabled": true
										},
										{
											"key": "amount_lte",
											"value": "#trx with amount less than this value",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get categories for account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/accounts/{{finx_account_id}}/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"accounts",
										"{{finx_account_id}}",
										"categories"
									],
									"query": [
										{
											"key": "period",
											"value": "2021-01",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "accesses",
											"value": "{{access_id}}",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "EUR",
											"disabled": true
										},
										{
											"key": "since",
											"value": "2021-01-15",
											"disabled": true
										},
										{
											"key": "until",
											"value": "2021-01-31",
											"disabled": true
										},
										{
											"key": "amount_gte",
											"value": "#trx with amount equal or greater than this value",
											"disabled": true
										},
										{
											"key": "amount_lte",
											"value": "#trx with amount less than this value",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category tree (Client_auth)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/category-tree",
									"host": [
										"{{host}}"
									],
									"path": [
										"category-tree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payment partners for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/payment-partners",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"payment-partners"
									],
									"query": [
										{
											"key": "accounts",
											"value": "{{account_id}}",
											"disabled": true
										},
										{
											"key": "period",
											"value": "2020-06",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "accesses",
											"value": "",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "",
											"disabled": true
										},
										{
											"key": "since",
											"value": "",
											"disabled": true
										},
										{
											"key": "until",
											"value": "",
											"disabled": true
										},
										{
											"key": "amount_gte",
											"value": "",
											"disabled": true
										},
										{
											"key": "amount_lt",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payment partners for account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/accounts/{{finx_account_id}}/payment-partners",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"accounts",
										"{{finx_account_id}}",
										"payment-partners"
									],
									"query": [
										{
											"key": "period",
											"value": "2020-06",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "",
											"disabled": true
										},
										{
											"key": "since",
											"value": "",
											"disabled": true
										},
										{
											"key": "until",
											"value": "",
											"disabled": true
										},
										{
											"key": "amount_gte",
											"value": "",
											"disabled": true
										},
										{
											"key": "amount_lt",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get financial timeline",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status Code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (responseCode.code === 200)",
											"{",
											"    var responseData = JSON.parse(responseBody);",
											"    if (responseData.accounts !== null)",
											"    {",
											"        postman.clearEnvironmentVariable(\"account_id\");",
											"        postman.setEnvironmentVariable(\"account_id\",responseData.accounts[0].account_id);",
											"    }",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/rest/timeline",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"timeline"
									],
									"query": [
										{
											"key": "since",
											"value": "",
											"disabled": true
										},
										{
											"key": "until",
											"value": "",
											"disabled": true
										},
										{
											"key": "frequency",
											"value": "",
											"description": "default: monthly\nEnum: \"daily\" \"weekly\" \"monthly\" \"quarterly\" \"yearly\"\nExample: frequency=weekly",
											"disabled": true
										},
										{
											"key": "currency",
											"value": null,
											"description": "default: \"EUR\"",
											"disabled": true
										},
										{
											"key": "accounts",
											"value": null,
											"description": "account_ids to be included. Example: accounts=A1.1,A1.3",
											"disabled": true
										},
										{
											"key": "categories",
											"value": null,
											"description": "Comma-separated list of custom category IDs. Only transactions matching these custom categories will be selected.",
											"disabled": true
										},
										{
											"key": "payment_partners",
											"value": null,
											"description": "Example: payment_partners=e89887dc-3eec-42cf-92eb-c83c772d99fd\nComma-separated list of payment partner IDs. Only transactions corresponding to these payment partners will be selected.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "For an easier understanding of a user's spending habits and sources of income the finX API provides the ability to aggregate transactions by categories or payment partners. Each grouping contains the total number of transactions, the accumulated amount, as well as the high and low values."
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{client_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{client_username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}